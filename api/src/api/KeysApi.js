/**
 * Akmey
 * Akmey is a keyserver for SSH public keys
 *
 * OpenAPI spec version: 0.0.1
 * Contact: me@leonekmi.fr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.2
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeleteResponse', 'model/EditResponse', 'model/Key', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeleteResponse'), require('../model/EditResponse'), require('../model/Key'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.Akmey) {
      root.Akmey = {};
    }
    root.Akmey.KeysApi = factory(root.Akmey.ApiClient, root.Akmey.DeleteResponse, root.Akmey.EditResponse, root.Akmey.Key, root.Akmey.User);
  }
}(this, function(ApiClient, DeleteResponse, EditResponse, Key, User) {
  'use strict';

  /**
   * Keys service.
   * @module api/KeysApi
   * @version 0.0.1
   */

  /**
   * Constructs a new KeysApi. 
   * @alias module:api/KeysApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the keyFetchPost operation.
     * @callback module:api/KeysApi~keyFetchPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Key} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch the key on Akmey
     * @param {String} key Content of key (w/o comment) to return
     * @param {module:api/KeysApi~keyFetchPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Key}
     */
    this.keyFetchPost = function(key, callback) {
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling keyFetchPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'key': key,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = Key;

      return this.apiClient.callApi(
        '/key/fetch', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the keysAddPost operation.
     * @callback module:api/KeysApi~keysAddPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a key
     * @param {String} key Content of key (w/o comment) to add
     * @param {module:api/KeysApi~keysAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditResponse}
     */
    this.keysAddPost = function(key, callback) {
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling keysAddPost");
      }


      var pathParams = {
      };
      var queryParams = {
        'key': key,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['akmey_auth', 'akmey_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = EditResponse;

      return this.apiClient.callApi(
        '/keys/add', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the keysKeyIdDelete operation.
     * @callback module:api/KeysApi~keysKeyIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeleteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete key
     * @param {String} keyId ID of key to remove
     * @param {module:api/KeysApi~keysKeyIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeleteResponse}
     */
    this.keysKeyIdDelete = function(keyId, callback) {
      var postBody = null;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling keysKeyIdDelete");
      }


      var pathParams = {
        'keyId': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['akmey_auth', 'akmey_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = DeleteResponse;

      return this.apiClient.callApi(
        '/keys/{keyId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the keysKeyIdGet operation.
     * @callback module:api/KeysApi~keysKeyIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a key by its ID
     * @param {String} keyId ID of key to return
     * @param {module:api/KeysApi~keysKeyIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.keysKeyIdGet = function(keyId, callback) {
      var postBody = null;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling keysKeyIdGet");
      }


      var pathParams = {
        'keyId': keyId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = User;

      return this.apiClient.callApi(
        '/keys/{keyId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the keysKeyIdPut operation.
     * @callback module:api/KeysApi~keysKeyIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit your key comment
     * @param {String} keyId ID of key to edit
     * @param {String} comment Comment of the key
     * @param {module:api/KeysApi~keysKeyIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditResponse}
     */
    this.keysKeyIdPut = function(keyId, comment, callback) {
      var postBody = null;

      // verify the required parameter 'keyId' is set
      if (keyId === undefined || keyId === null) {
        throw new Error("Missing the required parameter 'keyId' when calling keysKeyIdPut");
      }

      // verify the required parameter 'comment' is set
      if (comment === undefined || comment === null) {
        throw new Error("Missing the required parameter 'comment' when calling keysKeyIdPut");
      }


      var pathParams = {
        'keyId': keyId
      };
      var queryParams = {
        'comment': comment,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['akmey_auth', 'akmey_token'];
      var contentTypes = [];
      var accepts = [];
      var returnType = EditResponse;

      return this.apiClient.callApi(
        '/keys/{keyId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
